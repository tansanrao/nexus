services:
  # PostgreSQL 18 database
  postgres:
    image: tensorchord/vchord-postgres:pg18-v0.5.3
    container_name: nexus-postgres
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nexus}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme456}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d nexus"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - nexus-network
    restart: unless-stopped
    shm_size: '16GB'

  # Text Embeddings Inference service
  embeddings:
    image: ghcr.io/huggingface/text-embeddings-inference:cpu-1.8
    container_name: nexus-embeddings
    environment:
      MODEL_ID: ${EMBEDDINGS_MODEL_ID:-nomic-ai/nomic-embed-text-v1.5}
      NUM_SHARD: ${EMBEDDINGS_NUM_SHARD:-1}
      HF_TOKEN: ${HF_TOKEN:-}
      MAX_CONCURRENT_REQUESTS: ${EMBEDDINGS_MAX_CONCURRENT_REQUESTS:-8}
      PORT: 8080
    ports:
      - "${EMBEDDINGS_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - hf-cache:/data
    networks:
      - nexus-network
    restart: unless-stopped

  # Rust API server
  api-server:
    build:
      context: ./api-server
      dockerfile: Dockerfile
    container_name: nexus-api
    environment:
      # Database configuration (uses Rocket.toml env var substitution)
      ROCKET_DATABASES: '{nexus_db={url="postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-changeme456}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-nexus}"}}'
      ROCKET_ADDRESS: "0.0.0.0"
      ROCKET_PORT: "8000"
      # Mirror path (shared volume with grokmirror)
      MIRROR_BASE_PATH: ${MIRROR_BASE_PATH:-/app/mirrors}
      # Threading cache path
      THREADING_CACHE_BASE_PATH: ${THREADING_CACHE_BASE_PATH:-/app/cache}
      # Logging
      RUST_LOG: ${RUST_LOG:-info}
      # Embeddings
      EMBEDDINGS_URL: ${EMBEDDINGS_URL:-http://embeddings:8080}
      EMBEDDINGS_MODEL_ID: ${EMBEDDINGS_MODEL_ID:-nomic-ai/nomic-embed-text-v1.5}
      SEARCH_DEFAULT_MODE: ${SEARCH_DEFAULT_MODE:-hybrid}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - mirrors:/app/mirrors:ro
      - cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
      embeddings:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/mailing-lists"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - nexus-network
    restart: unless-stopped

  # React frontend with nginx
  frontend:
    build:
      context: ./frontend-new
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-/api}
    container_name: nexus-frontend
    environment:
      # HTTP Basic Authentication credentials
      HTTP_BASIC_AUTH_USERNAME: ${HTTP_BASIC_AUTH_USERNAME:-admin}
      HTTP_BASIC_AUTH_PASSWORD: ${HTTP_BASIC_AUTH_PASSWORD:-changeme123}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - api-server
    networks:
      - nexus-network
    restart: unless-stopped

networks:
  nexus-network:
    driver: bridge

volumes:
  pgdata:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${HOST_POSTGRES_DATA_PATH:-./data/postgres}
  mirrors:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${HOST_MIRROR_DATA_PATH:-./data/mirrors}
  cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${HOST_CACHE_DATA_PATH:-./data/cache}
  hf-cache:
    driver: local
