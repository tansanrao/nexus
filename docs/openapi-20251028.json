{
  "openapi": "3.0.0",
  "info": {
    "title": "api-server",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "/api/v1"
    }
  ],
  "paths": {
    "/health/live": {
      "get": {
        "tags": [
          "Health"
        ],
        "operationId": "routes_health_live_health",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_for_HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/health/ready": {
      "get": {
        "tags": [
          "Health"
        ],
        "operationId": "routes_health_ready_health",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_for_HealthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters"
          },
          "404": {
            "description": "Not Found - The requested resource was not found"
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "routes_auth_signup_blocked",
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "routes_auth_login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "routes_auth_refresh",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshResponse"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "routes_auth_logout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/session": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "routes_auth_session_cookie",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/keys": {
      "get": {
        "tags": [
          "Auth"
        ],
        "operationId": "routes_auth_signing_keys",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigningKeyMetadata"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/lists": {
      "get": {
        "tags": [
          "Lists"
        ],
        "operationId": "routes_mailing_lists_list_lists",
        "parameters": [
          {
            "name": "params",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ListQueryParams",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_for_Array_of_MailingList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters"
          },
          "404": {
            "description": "Not Found - The requested resource was not found"
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred"
          }
        }
      }
    },
    "/lists/{slug}": {
      "get": {
        "tags": [
          "Lists"
        ],
        "operationId": "routes_mailing_lists_get_list",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_for_MailingList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters"
          },
          "404": {
            "description": "Not Found - The requested resource was not found"
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred"
          }
        }
      }
    },
    "/lists/stats": {
      "get": {
        "tags": [
          "Lists"
        ],
        "operationId": "routes_stats_aggregate_stats",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_for_ListAggregateStats"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters"
          },
          "404": {
            "description": "Not Found - The requested resource was not found"
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred"
          }
        }
      }
    },
    "/lists/{slug}/stats": {
      "get": {
        "tags": [
          "Lists"
        ],
        "operationId": "routes_stats_list_stats",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_for_MailingListStats"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters"
          },
          "404": {
            "description": "Not Found - The requested resource was not found"
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred"
          }
        }
      }
    },
    "/lists/{slug}/threads": {
      "get": {
        "tags": [
          "Threads"
        ],
        "operationId": "routes_threads_list_threads",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ThreadListParams",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_for_Array_of_ThreadWithStarter"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters"
          },
          "404": {
            "description": "Not Found - The requested resource was not found"
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred"
          }
        }
      }
    },
    "/lists/{slug}/threads/{thread_id}": {
      "get": {
        "tags": [
          "Threads"
        ],
        "operationId": "routes_threads_get_thread",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_for_ThreadDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters"
          },
          "404": {
            "description": "Not Found - The requested resource was not found"
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred"
          }
        }
      }
    },
    "/lists/{slug}/emails": {
      "get": {
        "tags": [
          "Emails"
        ],
        "operationId": "routes_emails_list_emails",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EmailListParams",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_for_Array_of_EmailWithAuthor"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters"
          },
          "404": {
            "description": "Not Found - The requested resource was not found"
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred"
          }
        }
      }
    },
    "/lists/{slug}/emails/{email_id}": {
      "get": {
        "tags": [
          "Emails"
        ],
        "operationId": "routes_emails_get_email",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_for_EmailWithAuthor"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters"
          },
          "404": {
            "description": "Not Found - The requested resource was not found"
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred"
          }
        }
      }
    },
    "/authors": {
      "get": {
        "tags": [
          "Authors"
        ],
        "operationId": "routes_authors_list_authors",
        "parameters": [
          {
            "name": "params",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AuthorListParams",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_for_Array_of_AuthorWithStats"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters"
          },
          "404": {
            "description": "Not Found - The requested resource was not found"
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred"
          }
        }
      }
    },
    "/authors/{author_id}": {
      "get": {
        "tags": [
          "Authors"
        ],
        "operationId": "routes_authors_get_author",
        "parameters": [
          {
            "name": "author_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_for_AuthorWithStats"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters"
          },
          "404": {
            "description": "Not Found - The requested resource was not found"
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred"
          }
        }
      }
    },
    "/authors/{author_id}/lists/{slug}/emails": {
      "get": {
        "tags": [
          "Authors"
        ],
        "operationId": "routes_authors_get_author_emails",
        "parameters": [
          {
            "name": "author_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaginationParams",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_for_Array_of_EmailWithAuthor"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters"
          },
          "404": {
            "description": "Not Found - The requested resource was not found"
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred"
          }
        }
      }
    },
    "/authors/{author_id}/lists/{slug}/threads-started": {
      "get": {
        "tags": [
          "Authors"
        ],
        "operationId": "routes_authors_get_author_threads_started",
        "parameters": [
          {
            "name": "author_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ThreadListParams",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_for_Array_of_ThreadWithStarter"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters"
          },
          "404": {
            "description": "Not Found - The requested resource was not found"
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred"
          }
        }
      }
    },
    "/authors/{author_id}/lists/{slug}/threads-participated": {
      "get": {
        "tags": [
          "Authors"
        ],
        "operationId": "routes_authors_get_author_threads_participated",
        "parameters": [
          {
            "name": "author_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ThreadListParams",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse_for_Array_of_ThreadWithStarter"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters"
          },
          "404": {
            "description": "Not Found - The requested resource was not found"
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiResponse_for_HealthResponse": {
        "description": "Root response payload returned by REST endpoints.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/HealthResponse"
          },
          "meta": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseMeta"
              }
            ]
          }
        }
      },
      "HealthResponse": {
        "description": "Basic response payload describing API health.",
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "description": "Static status string reporting application readiness.",
            "type": "string"
          }
        }
      },
      "ResponseMeta": {
        "description": "Standard response envelope for the public and admin APIs.",
        "type": "object",
        "properties": {
          "pagination": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMeta"
              }
            ],
            "nullable": true
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortDescriptor"
            }
          },
          "listId": {
            "type": "string",
            "nullable": true
          },
          "filters": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true
          },
          "extra": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true
          }
        }
      },
      "PaginationMeta": {
        "description": "Pagination metadata attached to list responses.",
        "type": "object",
        "required": [
          "page",
          "pageSize",
          "totalItems",
          "totalPages"
        ],
        "properties": {
          "page": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SortDescriptor": {
        "description": "Sort metadata returned in the response envelope.",
        "type": "object",
        "required": [
          "direction",
          "field"
        ],
        "properties": {
          "field": {
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/SortDirection"
          }
        }
      },
      "SortDirection": {
        "description": "Direction applied to a sort field.",
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ]
      },
      "AuthErrorResponse": {
        "type": "object",
        "required": [
          "message",
          "status"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "message": {
            "type": "string"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "required": [
          "access_token",
          "access_token_expires_at",
          "csrf_token",
          "refresh_token_expires_at",
          "user"
        ],
        "properties": {
          "access_token": {
            "type": "string"
          },
          "access_token_expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "refresh_token_expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "csrf_token": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserSummary"
          }
        }
      },
      "UserSummary": {
        "type": "object",
        "required": [
          "email",
          "id",
          "role"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string"
          },
          "display_name": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          }
        }
      },
      "Role": {
        "type": "string",
        "enum": [
          "admin",
          "user"
        ]
      },
      "LoginRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "device_fingerprint": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RefreshResponse": {
        "type": "object",
        "required": [
          "access_token",
          "access_token_expires_at",
          "csrf_token",
          "refresh_token_expires_at"
        ],
        "properties": {
          "access_token": {
            "type": "string"
          },
          "access_token_expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "refresh_token_expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "csrf_token": {
            "type": "string"
          }
        }
      },
      "LogoutRequest": {
        "type": "object",
        "properties": {
          "all_devices": {
            "default": null,
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "SessionResponse": {
        "type": "object",
        "required": [
          "session_expires_at"
        ],
        "properties": {
          "session_expires_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SigningKeyMetadata": {
        "type": "object",
        "required": [
          "access_token_ttl_secs",
          "algorithm",
          "audience",
          "issuer",
          "refresh_token_ttl_secs"
        ],
        "properties": {
          "kid": {
            "type": "string",
            "nullable": true
          },
          "algorithm": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "audience": {
            "type": "string"
          },
          "access_token_ttl_secs": {
            "type": "integer",
            "format": "int64"
          },
          "refresh_token_ttl_secs": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiResponse_for_Array_of_MailingList": {
        "description": "Root response payload returned by REST endpoints.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MailingList"
            }
          },
          "meta": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseMeta"
              }
            ]
          }
        }
      },
      "MailingList": {
        "description": "Metadata for a mailing list managed by the service.",
        "type": "object",
        "required": [
          "enabled",
          "id",
          "name",
          "slug",
          "sync_priority"
        ],
        "properties": {
          "id": {
            "description": "Database identifier.",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Human-friendly display name.",
            "type": "string"
          },
          "slug": {
            "description": "Unique slug used in URLs (e.g. `linux-kernel`).",
            "type": "string"
          },
          "description": {
            "description": "Optional description sourced from the grokmirror manifest.",
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "description": "Whether sync jobs are allowed to run for this mailing list.",
            "type": "boolean"
          },
          "sync_priority": {
            "description": "Priority applied when enqueuing sync jobs (lower value first).",
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "description": "When the list record was created.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "last_synced_at": {
            "description": "Timestamp of the last successful sync, if any.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ListQueryParams": {
        "type": "object",
        "properties": {
          "page": {
            "default": 1,
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "default": 25,
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiResponse_for_MailingList": {
        "description": "Root response payload returned by REST endpoints.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MailingList"
          },
          "meta": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseMeta"
              }
            ]
          }
        }
      },
      "ApiResponse_for_ListAggregateStats": {
        "description": "Root response payload returned by REST endpoints.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ListAggregateStats"
          },
          "meta": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseMeta"
              }
            ]
          }
        }
      },
      "ListAggregateStats": {
        "description": "Aggregate mailing list statistics across the deployment.",
        "type": "object",
        "required": [
          "totalAuthors",
          "totalEmails",
          "totalLists",
          "totalThreads"
        ],
        "properties": {
          "totalLists": {
            "type": "integer",
            "format": "int64"
          },
          "totalEmails": {
            "type": "integer",
            "format": "int64"
          },
          "totalThreads": {
            "type": "integer",
            "format": "int64"
          },
          "totalAuthors": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiResponse_for_MailingListStats": {
        "description": "Root response payload returned by REST endpoints.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MailingListStats"
          },
          "meta": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseMeta"
              }
            ]
          }
        }
      },
      "MailingListStats": {
        "description": "Summary statistics for a single mailing list.",
        "type": "object",
        "required": [
          "authorCount",
          "emailCount",
          "threadCount"
        ],
        "properties": {
          "emailCount": {
            "description": "Total number of emails stored for the mailing list.",
            "type": "integer",
            "format": "int64"
          },
          "threadCount": {
            "description": "Total number of threads.",
            "type": "integer",
            "format": "int64"
          },
          "authorCount": {
            "description": "Number of unique authors.",
            "type": "integer",
            "format": "int64"
          },
          "dateRangeStart": {
            "description": "Oldest email timestamp.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateRangeEnd": {
            "description": "Newest email timestamp.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ApiResponse_for_Array_of_ThreadWithStarter": {
        "description": "Root response payload returned by REST endpoints.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ThreadWithStarter"
            }
          },
          "meta": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseMeta"
              }
            ]
          }
        }
      },
      "ThreadWithStarter": {
        "description": "Thread metadata augmented with the starter author.",
        "type": "object",
        "required": [
          "id",
          "last_date",
          "mailing_list_id",
          "root_message_id",
          "start_date",
          "starter_email",
          "starter_id",
          "subject"
        ],
        "properties": {
          "id": {
            "description": "Thread identifier.",
            "type": "integer",
            "format": "int32"
          },
          "mailing_list_id": {
            "description": "Mailing list identifier.",
            "type": "integer",
            "format": "int32"
          },
          "root_message_id": {
            "description": "RFC 822 message-id of the root email.",
            "type": "string"
          },
          "subject": {
            "description": "Thread subject.",
            "type": "string"
          },
          "start_date": {
            "description": "Thread start timestamp.",
            "type": "string",
            "format": "date-time"
          },
          "last_date": {
            "description": "Most recent activity timestamp.",
            "type": "string",
            "format": "date-time"
          },
          "message_count": {
            "description": "Total number of emails in the thread.",
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "starter_id": {
            "description": "Author identifier for the thread starter.",
            "type": "integer",
            "format": "int32"
          },
          "starter_name": {
            "description": "Canonical name of the starter, if known.",
            "type": "string",
            "nullable": true
          },
          "starter_email": {
            "description": "Email of the thread starter.",
            "type": "string"
          }
        }
      },
      "ThreadListParams": {
        "description": "Query parameters supported by the thread list endpoint.",
        "type": "object",
        "properties": {
          "page": {
            "default": 1,
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "default": 25,
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiResponse_for_ThreadDetail": {
        "description": "Root response payload returned by REST endpoints.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ThreadDetail"
          },
          "meta": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseMeta"
              }
            ]
          }
        }
      },
      "ThreadDetail": {
        "description": "Thread details including the threaded list of emails.",
        "type": "object",
        "required": [
          "emails",
          "thread"
        ],
        "properties": {
          "thread": {
            "description": "Thread metadata.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Thread"
              }
            ]
          },
          "emails": {
            "description": "Emails that belong to the thread ordered depth-first.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailHierarchy"
            }
          }
        }
      },
      "Thread": {
        "description": "Thread metadata stored in the database.",
        "type": "object",
        "required": [
          "id",
          "last_date",
          "mailing_list_id",
          "root_message_id",
          "start_date",
          "subject"
        ],
        "properties": {
          "id": {
            "description": "Database identifier.",
            "type": "integer",
            "format": "int32"
          },
          "mailing_list_id": {
            "description": "Mailing list identifier.",
            "type": "integer",
            "format": "int32"
          },
          "root_message_id": {
            "description": "RFC 822 message-id of the root email.",
            "type": "string"
          },
          "subject": {
            "description": "Normalized thread subject.",
            "type": "string"
          },
          "start_date": {
            "description": "Timestamp of the first email in the thread.",
            "type": "string",
            "format": "date-time"
          },
          "last_date": {
            "description": "Timestamp of the latest email in the thread.",
            "type": "string",
            "format": "date-time"
          },
          "message_count": {
            "description": "Total number of emails in the thread.",
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "EmailHierarchy": {
        "description": "Email node enriched with depth information for thread rendering.",
        "type": "object",
        "required": [
          "author_email",
          "author_id",
          "date",
          "depth",
          "git_commit_hash",
          "id",
          "is_patch_only",
          "mailing_list_id",
          "message_id",
          "patch_type",
          "subject"
        ],
        "properties": {
          "id": {
            "description": "Email identifier.",
            "type": "integer",
            "format": "int32"
          },
          "mailing_list_id": {
            "description": "Mailing list identifier.",
            "type": "integer",
            "format": "int32"
          },
          "message_id": {
            "description": "RFC 822 message-id.",
            "type": "string"
          },
          "git_commit_hash": {
            "description": "Git commit hash referencing the blob inside the mirror.",
            "type": "string"
          },
          "author_id": {
            "description": "Author identifier.",
            "type": "integer",
            "format": "int32"
          },
          "subject": {
            "description": "Email subject.",
            "type": "string"
          },
          "date": {
            "description": "Email timestamp.",
            "type": "string",
            "format": "date-time"
          },
          "in_reply_to": {
            "description": "Optional parent message-id.",
            "type": "string",
            "nullable": true
          },
          "body": {
            "description": "Message body, where available.",
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "description": "Timestamp when the row was inserted.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "author_name": {
            "description": "Canonical author name, if known.",
            "type": "string",
            "nullable": true
          },
          "author_email": {
            "description": "Author email address.",
            "type": "string"
          },
          "depth": {
            "description": "Depth within the thread tree (root = 0).",
            "type": "integer",
            "format": "int32"
          },
          "patch_type": {
            "description": "Patch classification for this email.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchType"
              }
            ]
          },
          "is_patch_only": {
            "description": "Whether the body is entirely commit message + diff content.",
            "type": "boolean"
          },
          "patch_metadata": {
            "description": "Inline patch metadata (diff sections, trailers, diffstat).",
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchMetadata"
              }
            ],
            "nullable": true
          }
        }
      },
      "PatchType": {
        "description": "Classification of an email's patch content.",
        "oneOf": [
          {
            "description": "No git patch content detected.",
            "type": "string",
            "enum": [
              "None"
            ]
          },
          {
            "description": "Inline diff detected within the email body.",
            "type": "string",
            "enum": [
              "Inline"
            ]
          },
          {
            "description": "Patch provided via attachment (text/x-patch, text/x-diff, etc.).",
            "type": "string",
            "enum": [
              "Attachment"
            ]
          }
        ]
      },
      "PatchMetadata": {
        "description": "Aggregated metadata about inline git patches inside an email.",
        "type": "object",
        "required": [
          "diff_sections",
          "trailer_count"
        ],
        "properties": {
          "diff_sections": {
            "description": "Inline diff chunks detected in the body.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchSection"
            }
          },
          "diffstat_section": {
            "description": "Optional section covering the diffstat block (between `---` separator and the first diff).",
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchSection"
              }
            ],
            "nullable": true
          },
          "trailer_sections": {
            "description": "Sections covering trailers (Signed-off-by, Acked-by, etc.) and optional git footers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchSection"
            }
          },
          "separator_line": {
            "description": "Position of the RFC 822 style `---` separator, if present.",
            "type": "integer",
            "format": "uint",
            "minimum": 0.0,
            "nullable": true
          },
          "trailer_count": {
            "description": "Total number of trailer lines detected (Signed-off-by, Reviewed-by, ...).",
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      },
      "PatchSection": {
        "description": "Inclusive range (0-based line numbers) marking a logical patch section.",
        "type": "object",
        "required": [
          "end_line",
          "start_line"
        ],
        "properties": {
          "start_line": {
            "description": "First line (0-based index) belonging to the section.",
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          },
          "end_line": {
            "description": "Last line (0-based index) belonging to the section.",
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      },
      "ApiResponse_for_Array_of_EmailWithAuthor": {
        "description": "Root response payload returned by REST endpoints.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailWithAuthor"
            }
          },
          "meta": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseMeta"
              }
            ]
          }
        }
      },
      "EmailWithAuthor": {
        "description": "Email row enriched with author metadata for API responses.",
        "type": "object",
        "required": [
          "author_email",
          "author_id",
          "date",
          "git_commit_hash",
          "id",
          "is_patch_only",
          "mailing_list_id",
          "message_id",
          "patch_type",
          "subject"
        ],
        "properties": {
          "id": {
            "description": "Database identifier.",
            "type": "integer",
            "format": "int32"
          },
          "mailing_list_id": {
            "description": "Mailing list identifier.",
            "type": "integer",
            "format": "int32"
          },
          "message_id": {
            "description": "RFC 822 message-id.",
            "type": "string"
          },
          "git_commit_hash": {
            "description": "Git commit hash referencing the blob inside the mirror.",
            "type": "string"
          },
          "author_id": {
            "description": "Author identifier.",
            "type": "integer",
            "format": "int32"
          },
          "subject": {
            "description": "Email subject line.",
            "type": "string"
          },
          "date": {
            "description": "Original message timestamp.",
            "type": "string",
            "format": "date-time"
          },
          "in_reply_to": {
            "description": "Optional parent message-id (for replies).",
            "type": "string",
            "nullable": true
          },
          "body": {
            "description": "Message body (may be truncated or sanitized).",
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "description": "Timestamp when the row was inserted.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "author_name": {
            "description": "Canonical author name, if known.",
            "type": "string",
            "nullable": true
          },
          "author_email": {
            "description": "Author email address.",
            "type": "string"
          },
          "patch_type": {
            "description": "Patch classification for this email.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchType"
              }
            ]
          },
          "is_patch_only": {
            "description": "Whether the body is entirely commit message + diff content.",
            "type": "boolean"
          },
          "patch_metadata": {
            "description": "Inline patch metadata (diff sections, trailers, diffstat).",
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchMetadata"
              }
            ],
            "nullable": true
          }
        }
      },
      "EmailListParams": {
        "type": "object",
        "properties": {
          "page": {
            "default": 1,
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "default": 50,
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiResponse_for_EmailWithAuthor": {
        "description": "Root response payload returned by REST endpoints.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EmailWithAuthor"
          },
          "meta": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseMeta"
              }
            ]
          }
        }
      },
      "ApiResponse_for_Array_of_AuthorWithStats": {
        "description": "Root response payload returned by REST endpoints.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorWithStats"
            }
          },
          "meta": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseMeta"
              }
            ]
          }
        }
      },
      "AuthorWithStats": {
        "description": "Aggregated author statistics used in list and detail endpoints.",
        "type": "object",
        "required": [
          "email",
          "email_count",
          "id",
          "mailing_lists",
          "name_variations",
          "thread_count"
        ],
        "properties": {
          "id": {
            "description": "Author identifier.",
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "description": "Primary email address.",
            "type": "string"
          },
          "canonical_name": {
            "description": "Normalized/canonical author name.",
            "type": "string",
            "nullable": true
          },
          "first_seen": {
            "description": "When the author was first seen in any mailing list.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "last_seen": {
            "description": "Most recent activity timestamp.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "email_count": {
            "description": "Number of emails authored in the target mailing list.",
            "type": "integer",
            "format": "int64"
          },
          "thread_count": {
            "description": "Number of threads the author participated in.",
            "type": "integer",
            "format": "int64"
          },
          "first_email_date": {
            "description": "Timestamp of the first email authored in the list.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "last_email_date": {
            "description": "Timestamp of the latest email authored in the list.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "mailing_lists": {
            "description": "All mailing list slugs where the author is active.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name_variations": {
            "description": "Observed name variants sorted by usage count.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AuthorListParams": {
        "type": "object",
        "properties": {
          "page": {
            "default": 1,
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "default": 25,
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "q": {
            "default": null,
            "type": "string",
            "nullable": true
          },
          "listSlug": {
            "default": null,
            "type": "string",
            "nullable": true
          }
        }
      },
      "ApiResponse_for_AuthorWithStats": {
        "description": "Root response payload returned by REST endpoints.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AuthorWithStats"
          },
          "meta": {
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseMeta"
              }
            ]
          }
        }
      },
      "PaginationParams": {
        "description": "Common pagination parameters applied to list endpoints.",
        "type": "object",
        "properties": {
          "page": {
            "description": "One-based page index (defaults to the first page).",
            "default": 1,
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "description": "Number of items per page (clamped between 1 and 100, default 50).",
            "default": 25,
            "type": "integer",
            "format": "int64"
          }
        }
      }
    }
  }
}