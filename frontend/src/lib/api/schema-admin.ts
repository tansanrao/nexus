/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_mailing_lists_admin_list_lists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_mailing_lists_admin_get_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{slug}/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_mailing_lists_admin_get_list_with_repos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{slug}/toggle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["routes_mailing_lists_admin_toggle_list"];
        trace?: never;
    };
    "/lists/seed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["routes_mailing_lists_admin_seed_lists"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_admin_list_jobs"];
        put?: never;
        post: operations["routes_admin_create_job"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_admin_get_job"];
        put?: never;
        post?: never;
        delete: operations["routes_admin_delete_job"];
        options?: never;
        head?: never;
        patch: operations["routes_admin_patch_job"];
        trace?: never;
    };
    "/database/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["routes_admin_reset_database_endpoint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/database/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_admin_database_status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/database/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_admin_database_config"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/indexes/threads/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["routes_search_refresh_search_indexes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/indexes/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["routes_search_reset_search_indexes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_Array_of_MailingList: {
            data: components["schemas"]["MailingList"][];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        /** @description Metadata for a mailing list managed by the service. */
        MailingList: {
            /**
             * Format: int32
             * @description Database identifier.
             */
            id: number;
            /** @description Human-friendly display name. */
            name: string;
            /** @description Unique slug used in URLs (e.g. `linux-kernel`). */
            slug: string;
            /** @description Optional description sourced from the grokmirror manifest. */
            description?: string | null;
            /** @description Whether sync jobs are allowed to run for this mailing list. */
            enabled: boolean;
            /**
             * Format: int32
             * @description Priority applied when enqueuing sync jobs (lower value first).
             */
            sync_priority: number;
            /**
             * Format: date-time
             * @description When the list record was created.
             */
            created_at?: string | null;
            /**
             * Format: date-time
             * @description Timestamp of the last successful sync, if any.
             */
            last_synced_at?: string | null;
        };
        /** @description Standard response envelope for the public and admin APIs. */
        ResponseMeta: {
            pagination?: components["schemas"]["PaginationMeta"] | null;
            sort?: components["schemas"]["SortDescriptor"][];
            listId?: string | null;
            filters?: {
                [key: string]: unknown;
            } | null;
            extra?: {
                [key: string]: unknown;
            } | null;
        };
        /** @description Pagination metadata attached to list responses. */
        PaginationMeta: {
            /** Format: int64 */
            page: number;
            /** Format: int64 */
            pageSize: number;
            /** Format: int64 */
            totalPages: number;
            /** Format: int64 */
            totalItems: number;
        };
        /** @description Sort metadata returned in the response envelope. */
        SortDescriptor: {
            field: string;
            direction: components["schemas"]["SortDirection"];
        };
        /**
         * @description Direction applied to a sort field.
         * @enum {string}
         */
        SortDirection: "asc" | "desc";
        ListQueryParams: {
            /**
             * Format: int64
             * @default 1
             */
            page: number;
            /**
             * Format: int64
             * @default 25
             */
            pageSize: number;
            /** @default [] */
            sort: string[];
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_MailingList: {
            data: components["schemas"]["MailingList"];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_MailingListWithRepos: {
            data: components["schemas"]["MailingListWithRepos"];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        /** @description Mailing list descriptor bundled with all configured repositories. */
        MailingListWithRepos: {
            /** @description Repository shards belonging to the mailing list. */
            repos: components["schemas"]["MailingListRepository"][];
            /**
             * Format: int32
             * @description Database identifier.
             */
            id: number;
            /** @description Human-friendly display name. */
            name: string;
            /** @description Unique slug used in URLs (e.g. `linux-kernel`). */
            slug: string;
            /** @description Optional description sourced from the grokmirror manifest. */
            description?: string | null;
            /** @description Whether sync jobs are allowed to run for this mailing list. */
            enabled: boolean;
            /**
             * Format: int32
             * @description Priority applied when enqueuing sync jobs (lower value first).
             */
            sync_priority: number;
            /**
             * Format: date-time
             * @description When the list record was created.
             */
            created_at?: string | null;
            /**
             * Format: date-time
             * @description Timestamp of the last successful sync, if any.
             */
            last_synced_at?: string | null;
        };
        /** @description Repository shard backing a mailing list (one per public-inbox epoch). */
        MailingListRepository: {
            /**
             * Format: int32
             * @description Database identifier.
             */
            id: number;
            /**
             * Format: int32
             * @description Parent mailing list identifier.
             */
            mailing_list_id: number;
            /** @description Remote repository URL (https://lore.kernel.org/...). */
            repo_url: string;
            /**
             * Format: int32
             * @description Repository order/epoch. Lower numbers represent older history.
             */
            repo_order: number;
            /** @description Last commit processed during sync, if any. */
            last_indexed_commit?: string | null;
            /**
             * Format: date-time
             * @description Timestamp of when the shard configuration was added.
             */
            created_at?: string | null;
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_ToggleResponse: {
            data: components["schemas"]["ToggleResponse"];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        ToggleResponse: {
            message: string;
            enabled: boolean;
        };
        ToggleRequest: {
            enabled: boolean;
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_SeedResponse: {
            data: components["schemas"]["SeedResponse"];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        SeedResponse: {
            message: string;
            /** Format: uint */
            mailingListsCreated: number;
            /** Format: uint */
            repositoriesCreated: number;
            /** Format: uint */
            partitionsCreated: number;
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_Array_of_JobRecord: {
            data: components["schemas"]["JobRecord"][];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        JobRecord: {
            /** Format: int32 */
            id: number;
            jobType: components["schemas"]["JobType"];
            status: components["schemas"]["JobStatus"];
            /** Format: int32 */
            priority: number;
            payload: unknown;
            /** Format: int32 */
            mailingListId?: number | null;
            mailingListSlug?: string | null;
            mailingListName?: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            startedAt?: string | null;
            /** Format: date-time */
            completedAt?: string | null;
            /** Format: date-time */
            lastHeartbeat?: string | null;
            errorMessage?: string | null;
        };
        /** @enum {string} */
        JobType: "import" | "index_maintenance";
        /** @enum {string} */
        JobStatus: "queued" | "running" | "succeeded" | "failed" | "cancelled";
        JobListParams: {
            /**
             * Format: int64
             * @default 1
             */
            page: number;
            /**
             * Format: int64
             * @default 25
             */
            pageSize: number;
            /** @default [] */
            status: string[];
            /** @default [] */
            jobType: string[];
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_JobRecord: {
            data: components["schemas"]["JobRecord"];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        CreateJobRequest: {
            jobType: components["schemas"]["JobType"];
            /** @default null */
            payload: unknown;
            /**
             * Format: int32
             * @default null
             */
            priority: number | null;
            mailingListSlug?: string | null;
        };
        UpdateJobRequest: {
            /** @default null */
            action: string | null;
            /**
             * Format: int32
             * @default null
             */
            priority: number | null;
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_AnyValue: {
            data: unknown;
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_MessageResponse: {
            data: components["schemas"]["MessageResponse"];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        MessageResponse: {
            message: string;
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_DatabaseStatusResponse: {
            data: components["schemas"]["DatabaseStatusResponse"];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        DatabaseStatusResponse: {
            /** Format: int64 */
            totalAuthors: number;
            /** Format: int64 */
            totalEmails: number;
            /** Format: int64 */
            totalThreads: number;
            /** Format: int64 */
            totalRecipients: number;
            /** Format: int64 */
            totalReferences: number;
            /** Format: int64 */
            totalThreadMemberships: number;
            /** Format: partial-date-time */
            dateRangeStart?: string | null;
            /** Format: partial-date-time */
            dateRangeEnd?: string | null;
        };
        SearchIndexRefreshRequest: {
            /** @default null */
            mailingListSlug: string | null;
            /**
             * Format: int32
             * @default null
             */
            priority: number | null;
        };
        SearchIndexResetRequest: {
            /**
             * Format: int32
             * @default null
             */
            priority: number | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    routes_mailing_lists_admin_list_lists: {
        parameters: {
            query?: {
                params?: components["schemas"]["ListQueryParams"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_Array_of_MailingList"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_mailing_lists_admin_get_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_MailingList"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_mailing_lists_admin_get_list_with_repos: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_MailingListWithRepos"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_mailing_lists_admin_toggle_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToggleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_ToggleResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_mailing_lists_admin_seed_lists: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_SeedResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_list_jobs: {
        parameters: {
            query?: {
                params?: components["schemas"]["JobListParams"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_Array_of_JobRecord"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_create_job: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateJobRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_JobRecord"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_get_job: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_JobRecord"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_delete_job: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_AnyValue"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_patch_job: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateJobRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_JobRecord"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_reset_database_endpoint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_MessageResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_database_status: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_DatabaseStatusResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_database_config: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_AnyValue"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_search_refresh_search_indexes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SearchIndexRefreshRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_JobRecord"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_search_reset_search_indexes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SearchIndexResetRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_JobRecord"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
