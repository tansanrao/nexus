/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Health check endpoint returning a trivial JSON payload. */
        get: operations["routes_health_health_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/mailing-lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return every mailing list configured in the service. */
        get: operations["routes_mailing_lists_list_mailing_lists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/mailing-lists/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a specific mailing list by slug. */
        get: operations["routes_mailing_lists_get_mailing_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/mailing-lists/{slug}/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a mailing list along with all configured repository shards. */
        get: operations["routes_mailing_lists_get_mailing_list_with_repos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/mailing-lists/{slug}/toggle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Toggle the enabled state for a mailing list. */
        patch: operations["routes_mailing_lists_toggle_mailing_list"];
        trace?: never;
    };
    "/admin/mailing-lists/seed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * @description Seed mailing lists from the live grokmirror manifest.
         *
         *     This operation is idempotentâ€”existing mailing lists and repositories are preserved, while new entries are inserted and missing partitions created.
         */
        post: operations["routes_mailing_lists_seed_mailing_lists"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{slug}/threads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List threads in a mailing list with pagination and sorting. */
        get: operations["routes_threads_list_threads"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{slug}/threads/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search threads inside a mailing list using lexical ranking. */
        get: operations["routes_threads_search_threads"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{slug}/threads/{thread_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve thread metadata and the threaded email hierarchy. */
        get: operations["routes_threads_get_thread"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{slug}/emails/{email_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a single email in the context of a mailing list. */
        get: operations["routes_emails_get_email"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{slug}/authors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * @description Search authors in a mailing list with filtering and sorting.
         *
         *     Supports case-insensitive filtering by email or canonical name as well as pagination and sorting options that map directly to the OpenAPI schema.
         */
        get: operations["routes_authors_search_authors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{slug}/authors/{author_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a specific author with mailing list context. */
        get: operations["routes_authors_get_author"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{slug}/authors/{author_id}/emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List the emails sent by a specific author in a mailing list. */
        get: operations["routes_authors_get_author_emails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{slug}/authors/{author_id}/threads-started": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List threads started by the author within the mailing list. */
        get: operations["routes_authors_get_author_threads_started"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{slug}/authors/{author_id}/threads-participated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List threads where the author has participated (not necessarily started). */
        get: operations["routes_authors_get_author_threads_participated"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{slug}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve aggregate statistics for a specific mailing list. */
        get: operations["routes_stats_get_stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/sync/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Enqueue sync jobs for every enabled mailing list. */
        post: operations["routes_admin_start_sync"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/sync/queue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Enqueue sync jobs for specific mailing lists. */
        post: operations["routes_admin_queue_sync"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/sync/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve queue status and the currently running job. */
        get: operations["routes_admin_get_sync_status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/sync/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Cancel all sync jobs, including the active job if one is running. */
        post: operations["routes_admin_cancel_sync"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/database/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Drop and recreate the database schema. */
        post: operations["routes_admin_reset_db"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/database/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return aggregate statistics about the database. */
        get: operations["routes_admin_get_database_status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/database/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return PostgreSQL configuration details relevant for monitoring. */
        get: operations["routes_admin_get_database_config"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/search/index/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Refresh search-derived fields and optionally reindex supporting indexes. */
        post: operations["routes_admin_refresh_search_index"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/search/index/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Drop and recreate search indexes. */
        post: operations["routes_admin_reset_search_indexes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Basic response payload describing API health. */
        HealthResponse: {
            /** @description Static status string reporting application readiness. */
            status: string;
        };
        /** @description Generic wrapper used by endpoints that return simple collections. */
        DataResponse_for_Array_of_MailingList: {
            /** @description Response payload. */
            data: components["schemas"]["MailingList"][];
        };
        /** @description Metadata for a mailing list managed by the service. */
        MailingList: {
            /**
             * Format: int32
             * @description Database identifier.
             */
            id: number;
            /** @description Human-friendly display name. */
            name: string;
            /** @description Unique slug used in URLs (e.g. `linux-kernel`). */
            slug: string;
            /** @description Optional description sourced from the grokmirror manifest. */
            description?: string | null;
            /** @description Whether sync jobs are allowed to run for this mailing list. */
            enabled: boolean;
            /**
             * Format: int32
             * @description Priority applied when enqueuing sync jobs (lower value first).
             */
            sync_priority: number;
            /**
             * Format: date-time
             * @description When the list record was created.
             */
            created_at?: string | null;
            /**
             * Format: date-time
             * @description Timestamp of the last successful sync, if any.
             */
            last_synced_at?: string | null;
        };
        /** @description Mailing list descriptor bundled with all configured repositories. */
        MailingListWithRepos: {
            /** @description Repository shards belonging to the mailing list. */
            repos: components["schemas"]["MailingListRepository"][];
            /**
             * Format: int32
             * @description Database identifier.
             */
            id: number;
            /** @description Human-friendly display name. */
            name: string;
            /** @description Unique slug used in URLs (e.g. `linux-kernel`). */
            slug: string;
            /** @description Optional description sourced from the grokmirror manifest. */
            description?: string | null;
            /** @description Whether sync jobs are allowed to run for this mailing list. */
            enabled: boolean;
            /**
             * Format: int32
             * @description Priority applied when enqueuing sync jobs (lower value first).
             */
            sync_priority: number;
            /**
             * Format: date-time
             * @description When the list record was created.
             */
            created_at?: string | null;
            /**
             * Format: date-time
             * @description Timestamp of the last successful sync, if any.
             */
            last_synced_at?: string | null;
        };
        /** @description Repository shard backing a mailing list (one per public-inbox epoch). */
        MailingListRepository: {
            /**
             * Format: int32
             * @description Database identifier.
             */
            id: number;
            /**
             * Format: int32
             * @description Parent mailing list identifier.
             */
            mailing_list_id: number;
            /** @description Remote repository URL (https://lore.kernel.org/...). */
            repo_url: string;
            /**
             * Format: int32
             * @description Repository order/epoch. Lower numbers represent older history.
             */
            repo_order: number;
            /** @description Last commit processed during sync, if any. */
            last_indexed_commit?: string | null;
            /**
             * Format: date-time
             * @description Timestamp of when the shard configuration was added.
             */
            created_at?: string | null;
        };
        ToggleResponse: {
            /** @description Confirmation message. */
            message: string;
            /** @description The mailing list's enabled state after applying the change. */
            enabled: boolean;
        };
        ToggleRequest: {
            /** @description Desired enabled state. */
            enabled: boolean;
        };
        SeedResponse: {
            /** @description Summary message. */
            message: string;
            /** Format: uint */
            mailingListsCreated: number;
            /** Format: uint */
            repositoriesCreated: number;
            /** Format: uint */
            partitionsCreated: number;
        };
        /** @description Wrapper for paginated datasets. */
        PaginatedResponse_for_ThreadWithStarter: {
            /** @description Page content. */
            data: components["schemas"]["ThreadWithStarter"][];
            /** @description Associated pagination metadata. */
            page: components["schemas"]["PageMetadata"];
        };
        /** @description Thread metadata augmented with the starter author. */
        ThreadWithStarter: {
            /**
             * Format: int32
             * @description Thread identifier.
             */
            id: number;
            /**
             * Format: int32
             * @description Mailing list identifier.
             */
            mailing_list_id: number;
            /** @description RFC 822 message-id of the root email. */
            root_message_id: string;
            /** @description Thread subject. */
            subject: string;
            /**
             * Format: date-time
             * @description Thread start timestamp.
             */
            start_date: string;
            /**
             * Format: date-time
             * @description Most recent activity timestamp.
             */
            last_date: string;
            /**
             * Format: int32
             * @description Total number of emails in the thread.
             */
            message_count?: number | null;
            /**
             * Format: int32
             * @description Author identifier for the thread starter.
             */
            starter_id: number;
            /** @description Canonical name of the starter, if known. */
            starter_name?: string | null;
            /** @description Email of the thread starter. */
            starter_email: string;
        };
        /** @description Pagination metadata accompanying list responses. */
        PageMetadata: {
            /**
             * Format: int64
             * @description One-based page index.
             */
            page: number;
            /**
             * Format: int64
             * @description Page size.
             */
            size: number;
            /**
             * Format: int64
             * @description Total number of pages.
             */
            totalPages: number;
            /**
             * Format: int64
             * @description Total number of matching records.
             */
            totalElements: number;
        };
        /** @description Query parameters supported by the thread list endpoint. */
        ThreadListParams: {
            /**
             * Format: int64
             * @description Page of results to fetch (defaults to 1).
             * @default 1
             */
            page: number;
            /**
             * Format: int64
             * @description Page size (defaults to 50, maximum 100).
             * @default 50
             */
            size: number;
            /**
             * @description Sort column (defaults to `lastDate`).
             * @default lastDate
             */
            sortBy: components["schemas"]["ThreadSortField"];
            /**
             * @description Sort direction (defaults to `desc`).
             * @default desc
             */
            order: components["schemas"]["SortOrder"];
        };
        /**
         * @description Sorting options for thread listings.
         * @enum {string}
         */
        ThreadSortField: "startDate" | "lastDate" | "messageCount";
        /** @description Sort direction for list endpoints. */
        SortOrder: "asc" | "desc";
        /** @description Response envelope for thread search queries. */
        ThreadSearchResponse: {
            /** @description Original query string trimmed. */
            query: string;
            /**
             * Format: int64
             * @description One-based page index.
             */
            page: number;
            /**
             * Format: int64
             * @description Page size used for the request.
             */
            size: number;
            /**
             * Format: int64
             * @description Total number of matching threads (best effort for hybrid).
             */
            total: number;
            /** @description Ranked search hits. */
            results: components["schemas"]["ThreadSearchHit"][];
        };
        /** @description Search hit metadata for thread queries. */
        ThreadSearchHit: {
            /** @description Thread metadata and starter information. */
            thread: components["schemas"]["ThreadWithStarter"];
            /**
             * Format: float
             * @description Lexical score (0..1) when available.
             */
            lexical_score?: number | null;
        };
        ThreadSearchParams: {
            /** @default null */
            q: string | null;
            /**
             * Format: int64
             * @default 1
             */
            page: number;
            /**
             * Format: int64
             * @default 25
             */
            size: number;
            /** @default null */
            startDate: string | null;
            /** @default null */
            endDate: string | null;
            /**
             * Format: float
             * @default null
             */
            semanticRatio: number | null;
        };
        /** @description Thread details including the threaded list of emails. */
        ThreadDetail: {
            /** @description Thread metadata. */
            thread: components["schemas"]["Thread"];
            /** @description Emails that belong to the thread ordered depth-first. */
            emails: components["schemas"]["EmailHierarchy"][];
        };
        /** @description Thread metadata stored in the database. */
        Thread: {
            /**
             * Format: int32
             * @description Database identifier.
             */
            id: number;
            /**
             * Format: int32
             * @description Mailing list identifier.
             */
            mailing_list_id: number;
            /** @description RFC 822 message-id of the root email. */
            root_message_id: string;
            /** @description Normalized thread subject. */
            subject: string;
            /**
             * Format: date-time
             * @description Timestamp of the first email in the thread.
             */
            start_date: string;
            /**
             * Format: date-time
             * @description Timestamp of the latest email in the thread.
             */
            last_date: string;
            /**
             * Format: int32
             * @description Total number of emails in the thread.
             */
            message_count?: number | null;
        };
        /** @description Email node enriched with depth information for thread rendering. */
        EmailHierarchy: {
            /**
             * Format: int32
             * @description Email identifier.
             */
            id: number;
            /**
             * Format: int32
             * @description Mailing list identifier.
             */
            mailing_list_id: number;
            /** @description RFC 822 message-id. */
            message_id: string;
            /** @description Git commit hash referencing the blob inside the mirror. */
            git_commit_hash: string;
            /**
             * Format: int32
             * @description Author identifier.
             */
            author_id: number;
            /** @description Email subject. */
            subject: string;
            /**
             * Format: date-time
             * @description Email timestamp.
             */
            date: string;
            /** @description Optional parent message-id. */
            in_reply_to?: string | null;
            /** @description Message body, where available. */
            body?: string | null;
            /**
             * Format: date-time
             * @description Timestamp when the row was inserted.
             */
            created_at?: string | null;
            /** @description Canonical author name, if known. */
            author_name?: string | null;
            /** @description Author email address. */
            author_email: string;
            /**
             * Format: int32
             * @description Depth within the thread tree (root = 0).
             */
            depth: number;
            /** @description Patch classification for this email. */
            patch_type: components["schemas"]["PatchType"];
            /** @description Whether the body is entirely commit message + diff content. */
            is_patch_only: boolean;
            /** @description Inline patch metadata (diff sections, trailers, diffstat). */
            patch_metadata?: components["schemas"]["PatchMetadata"] | null;
        };
        /** @description Classification of an email's patch content. */
        PatchType: "None" | "Inline" | "Attachment";
        /** @description Aggregated metadata about inline git patches inside an email. */
        PatchMetadata: {
            /** @description Inline diff chunks detected in the body. */
            diff_sections: components["schemas"]["PatchSection"][];
            /** @description Optional section covering the diffstat block (between `---` separator and the first diff). */
            diffstat_section?: components["schemas"]["PatchSection"] | null;
            /** @description Sections covering trailers (Signed-off-by, Acked-by, etc.) and optional git footers. */
            trailer_sections?: components["schemas"]["PatchSection"][];
            /**
             * Format: uint
             * @description Position of the RFC 822 style `---` separator, if present.
             */
            separator_line?: number | null;
            /**
             * Format: uint
             * @description Total number of trailer lines detected (Signed-off-by, Reviewed-by, ...).
             */
            trailer_count: number;
        };
        /** @description Inclusive range (0-based line numbers) marking a logical patch section. */
        PatchSection: {
            /**
             * Format: uint
             * @description First line (0-based index) belonging to the section.
             */
            start_line: number;
            /**
             * Format: uint
             * @description Last line (0-based index) belonging to the section.
             */
            end_line: number;
        };
        /** @description Email row enriched with author metadata for API responses. */
        EmailWithAuthor: {
            /**
             * Format: int32
             * @description Database identifier.
             */
            id: number;
            /**
             * Format: int32
             * @description Mailing list identifier.
             */
            mailing_list_id: number;
            /** @description RFC 822 message-id. */
            message_id: string;
            /** @description Git commit hash referencing the blob inside the mirror. */
            git_commit_hash: string;
            /**
             * Format: int32
             * @description Author identifier.
             */
            author_id: number;
            /** @description Email subject line. */
            subject: string;
            /**
             * Format: date-time
             * @description Original message timestamp.
             */
            date: string;
            /** @description Optional parent message-id (for replies). */
            in_reply_to?: string | null;
            /** @description Message body (may be truncated or sanitized). */
            body?: string | null;
            /**
             * Format: date-time
             * @description Timestamp when the row was inserted.
             */
            created_at?: string | null;
            /** @description Canonical author name, if known. */
            author_name?: string | null;
            /** @description Author email address. */
            author_email: string;
            /** @description Patch classification for this email. */
            patch_type: components["schemas"]["PatchType"];
            /** @description Whether the body is entirely commit message + diff content. */
            is_patch_only: boolean;
            /** @description Inline patch metadata (diff sections, trailers, diffstat). */
            patch_metadata?: components["schemas"]["PatchMetadata"] | null;
        };
        /** @description Wrapper for paginated datasets. */
        PaginatedResponse_for_AuthorWithStats: {
            /** @description Page content. */
            data: components["schemas"]["AuthorWithStats"][];
            /** @description Associated pagination metadata. */
            page: components["schemas"]["PageMetadata"];
        };
        /** @description Aggregated author statistics used in list and detail endpoints. */
        AuthorWithStats: {
            /**
             * Format: int32
             * @description Author identifier.
             */
            id: number;
            /** @description Primary email address. */
            email: string;
            /** @description Normalized/canonical author name. */
            canonical_name?: string | null;
            /**
             * Format: date-time
             * @description When the author was first seen in any mailing list.
             */
            first_seen?: string | null;
            /**
             * Format: date-time
             * @description Most recent activity timestamp.
             */
            last_seen?: string | null;
            /**
             * Format: int64
             * @description Number of emails authored in the target mailing list.
             */
            email_count: number;
            /**
             * Format: int64
             * @description Number of threads the author participated in.
             */
            thread_count: number;
            /**
             * Format: date-time
             * @description Timestamp of the first email authored in the list.
             */
            first_email_date?: string | null;
            /**
             * Format: date-time
             * @description Timestamp of the latest email authored in the list.
             */
            last_email_date?: string | null;
            /** @description All mailing list slugs where the author is active. */
            mailing_lists: string[];
            /** @description Observed name variants sorted by usage count. */
            name_variations: string[];
        };
        /** @description Query parameters accepted by the author search endpoint. */
        AuthorSearchParams: {
            /**
             * @description Optional full-text search term matched against author name/email.
             * @default null
             */
            q: string | null;
            /**
             * Format: int64
             * @description Page of results to fetch (defaults to 1).
             * @default 1
             */
            page: number;
            /**
             * Format: int64
             * @description Page size (defaults to 50, maximum 100).
             * @default 50
             */
            size: number;
            /**
             * @description Sort column (defaults to `emailCount`).
             * @default emailCount
             */
            sortBy: components["schemas"]["AuthorSortField"];
            /**
             * @description Sort direction (defaults to `desc`).
             * @default desc
             */
            order: components["schemas"]["SortOrder"];
        };
        /**
         * @description Sort keys supported by the author search endpoint.
         * @enum {string}
         */
        AuthorSortField: "canonicalName" | "email" | "emailCount" | "threadCount" | "firstEmailDate" | "lastEmailDate";
        /** @description Wrapper for paginated datasets. */
        PaginatedResponse_for_EmailWithAuthor: {
            /** @description Page content. */
            data: components["schemas"]["EmailWithAuthor"][];
            /** @description Associated pagination metadata. */
            page: components["schemas"]["PageMetadata"];
        };
        /** @description Common pagination parameters applied to list endpoints. */
        PaginationParams: {
            /**
             * Format: int64
             * @description One-based page index (defaults to the first page).
             * @default 1
             */
            page: number;
            /**
             * Format: int64
             * @description Number of items per page (clamped between 1 and 100, default 50).
             * @default 50
             */
            size: number;
        };
        /** @description Wrapper for paginated datasets. */
        PaginatedResponse_for_Thread: {
            /** @description Page content. */
            data: components["schemas"]["Thread"][];
            /** @description Associated pagination metadata. */
            page: components["schemas"]["PageMetadata"];
        };
        /** @description Summary statistics for a mailing list. */
        Stats: {
            /**
             * Format: int64
             * @description Total number of emails stored for the mailing list.
             */
            total_emails: number;
            /**
             * Format: int64
             * @description Total number of threads.
             */
            total_threads: number;
            /**
             * Format: int64
             * @description Number of unique authors.
             */
            total_authors: number;
            /**
             * Format: date-time
             * @description Oldest email timestamp.
             */
            date_range_start?: string | null;
            /**
             * Format: date-time
             * @description Newest email timestamp.
             */
            date_range_end?: string | null;
        };
        /** @description Simple message wrapper for acknowledgement responses. */
        MessageResponse: {
            /** @description Response text. */
            message: string;
        };
        /** @description Response returned when sync jobs are queued. */
        SyncStartResponse: {
            /** @description Identifiers for the queued jobs. */
            jobIds: number[];
            /** @description Human-readable summary message. */
            message: string;
        };
        /** @description Request body for enqueuing sync jobs targeting specific mailing lists. */
        SyncRequest: {
            /** @description Mailing list slugs to process. */
            mailingListSlugs: string[];
        };
        /** @description Response describing the current sync queue. */
        SyncStatusResponse: {
            /** @description Currently running job, if any. */
            currentJob?: components["schemas"]["JobStatusInfo"] | null;
            /** @description Jobs waiting in the queue. */
            queuedJobs: components["schemas"]["QueuedJobInfo"][];
            /** @description Indicates whether a job is actively running. */
            isRunning: boolean;
        };
        JobStatusInfo: {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            mailingListId?: number | null;
            slug?: string | null;
            name?: string | null;
            jobType: components["schemas"]["JobType"];
            status: components["schemas"]["JobStatus"];
            /** Format: int32 */
            priority: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            started_at?: string | null;
            /** Format: date-time */
            completed_at?: string | null;
            error_message?: string | null;
        };
        /** @enum {string} */
        JobType: "import" | "index_maintenance";
        /** @enum {string} */
        JobStatus: "queued" | "running" | "succeeded" | "failed" | "cancelled";
        /** @description Simplified representation of a queued job. */
        QueuedJobInfo: {
            /**
             * Format: int32
             * @description Job identifier.
             */
            id: number;
            /**
             * Format: int32
             * @description Mailing list identifier.
             */
            mailingListId?: number | null;
            /** @description Mailing list slug. */
            mailingListSlug?: string | null;
            /** @description Mailing list display name. */
            mailingListName?: string | null;
            /** @description Job type discriminator. */
            jobType: components["schemas"]["JobType"];
            /** @description Current job status. */
            status: components["schemas"]["JobStatus"];
            /**
             * Format: int32
             * @description Position in the queue (1-based).
             */
            position: number;
        };
        /** @description Aggregated statistics about the database state. */
        DatabaseStatusResponse: {
            /** Format: int64 */
            totalAuthors: number;
            /** Format: int64 */
            totalEmails: number;
            /** Format: int64 */
            totalThreads: number;
            /** Format: int64 */
            totalRecipients: number;
            /** Format: int64 */
            totalReferences: number;
            /** Format: int64 */
            totalThreadMemberships: number;
            /** Format: partial-date-time */
            dateRangeStart?: string | null;
            /** Format: partial-date-time */
            dateRangeEnd?: string | null;
        };
        JobEnqueueResponse: {
            /** Format: int32 */
            jobId: number;
            jobType: components["schemas"]["JobType"];
            /** Format: int32 */
            mailingListId?: number | null;
            message: string;
        };
        /** @description Request payload for manual search index refresh operations. */
        SearchRefreshRequest: {
            /** @description Restrict the refresh to a specific mailing list slug; omitted for all lists. */
            mailingListSlug?: string | null;
            /**
             * @description When true, reindex supporting GIN/GIN-trgm/vector indexes after recomputing tsvectors.
             * @default false
             */
            reindex: boolean;
        };
        IndexMaintenanceRequest: {
            /** @default null */
            mailingListSlug: string | null;
            /** @default false */
            reindex: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    routes_health_health_check: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    routes_mailing_lists_list_mailing_lists: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataResponse_for_Array_of_MailingList"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_mailing_lists_get_mailing_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailingList"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_mailing_lists_get_mailing_list_with_repos: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailingListWithRepos"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_mailing_lists_toggle_mailing_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToggleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToggleResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_mailing_lists_seed_mailing_lists: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SeedResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_threads_list_threads: {
        parameters: {
            query?: {
                params?: components["schemas"]["ThreadListParams"];
            };
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_for_ThreadWithStarter"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_threads_search_threads: {
        parameters: {
            query?: {
                params?: components["schemas"]["ThreadSearchParams"];
            };
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadSearchResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_threads_get_thread: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                thread_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadDetail"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_emails_get_email: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                email_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailWithAuthor"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_authors_search_authors: {
        parameters: {
            query?: {
                params?: components["schemas"]["AuthorSearchParams"];
            };
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_for_AuthorWithStats"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_authors_get_author: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                author_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthorWithStats"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_authors_get_author_emails: {
        parameters: {
            query?: {
                params?: components["schemas"]["PaginationParams"];
            };
            header?: never;
            path: {
                slug: string;
                author_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_for_EmailWithAuthor"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_authors_get_author_threads_started: {
        parameters: {
            query?: {
                params?: components["schemas"]["PaginationParams"];
            };
            header?: never;
            path: {
                slug: string;
                author_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_for_ThreadWithStarter"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_authors_get_author_threads_participated: {
        parameters: {
            query?: {
                params?: components["schemas"]["PaginationParams"];
            };
            header?: never;
            path: {
                slug: string;
                author_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_for_Thread"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_stats_get_stats: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Stats"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_start_sync: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_queue_sync: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SyncRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SyncStartResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_get_sync_status: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SyncStatusResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_cancel_sync: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_reset_db: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_get_database_status: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseStatusResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_get_database_config: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_refresh_search_index: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SearchRefreshRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobEnqueueResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_admin_reset_search_indexes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IndexMaintenanceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobEnqueueResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
