/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_health_live_health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_health_ready_health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["routes_auth_signup_blocked"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["routes_auth_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["routes_auth_refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["routes_auth_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["routes_auth_session_cookie"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_auth_signing_keys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_mailing_lists_list_lists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_mailing_lists_get_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_stats_aggregate_stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{slug}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_stats_list_stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{slug}/threads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_threads_list_threads"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{slug}/threads/{thread_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_threads_get_thread"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{slug}/emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_emails_list_emails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{slug}/emails/{email_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_emails_get_email"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_authors_list_authors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authors/{author_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_authors_get_author"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authors/{author_id}/lists/{slug}/emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_authors_get_author_emails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authors/{author_id}/lists/{slug}/threads-started": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_authors_get_author_threads_started"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authors/{author_id}/lists/{slug}/threads-participated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["routes_authors_get_author_threads_participated"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_HealthResponse: {
            data: components["schemas"]["HealthResponse"];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        /** @description Basic response payload describing API health. */
        HealthResponse: {
            /** @description Static status string reporting application readiness. */
            status: string;
        };
        /** @description Standard response envelope for the public and admin APIs. */
        ResponseMeta: {
            pagination?: components["schemas"]["PaginationMeta"] | null;
            sort?: components["schemas"]["SortDescriptor"][];
            listId?: string | null;
            filters?: {
                [key: string]: unknown;
            } | null;
            extra?: {
                [key: string]: unknown;
            } | null;
        };
        /** @description Pagination metadata attached to list responses. */
        PaginationMeta: {
            /** Format: int64 */
            page: number;
            /** Format: int64 */
            pageSize: number;
            /** Format: int64 */
            totalPages: number;
            /** Format: int64 */
            totalItems: number;
        };
        /** @description Sort metadata returned in the response envelope. */
        SortDescriptor: {
            field: string;
            direction: components["schemas"]["SortDirection"];
        };
        /**
         * @description Direction applied to a sort field.
         * @enum {string}
         */
        SortDirection: "asc" | "desc";
        AuthErrorResponse: {
            /** Format: uint16 */
            status: number;
            message: string;
        };
        LoginResponse: {
            access_token: string;
            /** Format: date-time */
            access_token_expires_at: string;
            /** Format: date-time */
            refresh_token_expires_at: string;
            csrf_token: string;
            user: components["schemas"]["UserSummary"];
        };
        UserSummary: {
            /** Format: int32 */
            id: number;
            email: string;
            display_name?: string | null;
            role: components["schemas"]["Role"];
        };
        /** @enum {string} */
        Role: "admin" | "user";
        LoginRequest: {
            email: string;
            password: string;
            device_fingerprint?: string | null;
        };
        RefreshResponse: {
            access_token: string;
            /** Format: date-time */
            access_token_expires_at: string;
            /** Format: date-time */
            refresh_token_expires_at: string;
            csrf_token: string;
        };
        LogoutRequest: {
            /** @default null */
            all_devices: boolean | null;
        };
        SessionResponse: {
            /** Format: date-time */
            session_expires_at: string;
        };
        SigningKeyMetadata: {
            kid?: string | null;
            algorithm: string;
            issuer: string;
            audience: string;
            /** Format: int64 */
            access_token_ttl_secs: number;
            /** Format: int64 */
            refresh_token_ttl_secs: number;
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_Array_of_MailingList: {
            data: components["schemas"]["MailingList"][];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        /** @description Metadata for a mailing list managed by the service. */
        MailingList: {
            /**
             * Format: int32
             * @description Database identifier.
             */
            id: number;
            /** @description Human-friendly display name. */
            name: string;
            /** @description Unique slug used in URLs (e.g. `linux-kernel`). */
            slug: string;
            /** @description Optional description sourced from the grokmirror manifest. */
            description?: string | null;
            /** @description Whether sync jobs are allowed to run for this mailing list. */
            enabled: boolean;
            /**
             * Format: int32
             * @description Priority applied when enqueuing sync jobs (lower value first).
             */
            sync_priority: number;
            /**
             * Format: date-time
             * @description When the list record was created.
             */
            created_at?: string | null;
            /**
             * Format: date-time
             * @description Timestamp of the last successful sync, if any.
             */
            last_synced_at?: string | null;
        };
        ListQueryParams: {
            /**
             * Format: int64
             * @default 1
             */
            page: number;
            /**
             * Format: int64
             * @default 25
             */
            pageSize: number;
            /** @default [] */
            sort: string[];
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_MailingList: {
            data: components["schemas"]["MailingList"];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_ListAggregateStats: {
            data: components["schemas"]["ListAggregateStats"];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        /** @description Aggregate mailing list statistics across the deployment. */
        ListAggregateStats: {
            /** Format: int64 */
            totalLists: number;
            /** Format: int64 */
            totalEmails: number;
            /** Format: int64 */
            totalThreads: number;
            /** Format: int64 */
            totalAuthors: number;
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_MailingListStats: {
            data: components["schemas"]["MailingListStats"];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        /** @description Summary statistics for a single mailing list. */
        MailingListStats: {
            /**
             * Format: int64
             * @description Total number of emails stored for the mailing list.
             */
            emailCount: number;
            /**
             * Format: int64
             * @description Total number of threads.
             */
            threadCount: number;
            /**
             * Format: int64
             * @description Number of unique authors.
             */
            authorCount: number;
            /**
             * Format: date-time
             * @description Oldest email timestamp.
             */
            dateRangeStart?: string | null;
            /**
             * Format: date-time
             * @description Newest email timestamp.
             */
            dateRangeEnd?: string | null;
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_Array_of_ThreadWithStarter: {
            data: components["schemas"]["ThreadWithStarter"][];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        /** @description Thread metadata augmented with the starter author. */
        ThreadWithStarter: {
            /**
             * Format: int32
             * @description Thread identifier.
             */
            id: number;
            /**
             * Format: int32
             * @description Mailing list identifier.
             */
            mailing_list_id: number;
            /** @description RFC 822 message-id of the root email. */
            root_message_id: string;
            /** @description Thread subject. */
            subject: string;
            /**
             * Format: date-time
             * @description Thread start timestamp.
             */
            start_date: string;
            /**
             * Format: date-time
             * @description Most recent activity timestamp.
             */
            last_date: string;
            /**
             * Format: int32
             * @description Total number of emails in the thread.
             */
            message_count?: number | null;
            /**
             * Format: int32
             * @description Author identifier for the thread starter.
             */
            starter_id: number;
            /** @description Canonical name of the starter, if known. */
            starter_name?: string | null;
            /** @description Email of the thread starter. */
            starter_email: string;
        };
        /** @description Query parameters supported by the thread list endpoint. */
        ThreadListParams: {
            /**
             * Format: int64
             * @default 1
             */
            page: number;
            /**
             * Format: int64
             * @default 25
             */
            pageSize: number;
            /** @default [] */
            sort: string[];
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_ThreadDetail: {
            data: components["schemas"]["ThreadDetail"];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        /** @description Thread details including the threaded list of emails. */
        ThreadDetail: {
            /** @description Thread metadata. */
            thread: components["schemas"]["Thread"];
            /** @description Emails that belong to the thread ordered depth-first. */
            emails: components["schemas"]["EmailHierarchy"][];
        };
        /** @description Thread metadata stored in the database. */
        Thread: {
            /**
             * Format: int32
             * @description Database identifier.
             */
            id: number;
            /**
             * Format: int32
             * @description Mailing list identifier.
             */
            mailing_list_id: number;
            /** @description RFC 822 message-id of the root email. */
            root_message_id: string;
            /** @description Normalized thread subject. */
            subject: string;
            /**
             * Format: date-time
             * @description Timestamp of the first email in the thread.
             */
            start_date: string;
            /**
             * Format: date-time
             * @description Timestamp of the latest email in the thread.
             */
            last_date: string;
            /**
             * Format: int32
             * @description Total number of emails in the thread.
             */
            message_count?: number | null;
        };
        /** @description Email node enriched with depth information for thread rendering. */
        EmailHierarchy: {
            /**
             * Format: int32
             * @description Email identifier.
             */
            id: number;
            /**
             * Format: int32
             * @description Mailing list identifier.
             */
            mailing_list_id: number;
            /** @description RFC 822 message-id. */
            message_id: string;
            /** @description Git commit hash referencing the blob inside the mirror. */
            git_commit_hash: string;
            /**
             * Format: int32
             * @description Author identifier.
             */
            author_id: number;
            /** @description Email subject. */
            subject: string;
            /**
             * Format: date-time
             * @description Email timestamp.
             */
            date: string;
            /** @description Optional parent message-id. */
            in_reply_to?: string | null;
            /** @description Message body, where available. */
            body?: string | null;
            /**
             * Format: date-time
             * @description Timestamp when the row was inserted.
             */
            created_at?: string | null;
            /** @description Canonical author name, if known. */
            author_name?: string | null;
            /** @description Author email address. */
            author_email: string;
            /**
             * Format: int32
             * @description Depth within the thread tree (root = 0).
             */
            depth: number;
            /** @description Patch classification for this email. */
            patch_type: components["schemas"]["PatchType"];
            /** @description Whether the body is entirely commit message + diff content. */
            is_patch_only: boolean;
            /** @description Inline patch metadata (diff sections, trailers, diffstat). */
            patch_metadata?: components["schemas"]["PatchMetadata"] | null;
        };
        /** @description Classification of an email's patch content. */
        PatchType: "None" | "Inline" | "Attachment";
        /** @description Aggregated metadata about inline git patches inside an email. */
        PatchMetadata: {
            /** @description Inline diff chunks detected in the body. */
            diff_sections: components["schemas"]["PatchSection"][];
            /** @description Optional section covering the diffstat block (between `---` separator and the first diff). */
            diffstat_section?: components["schemas"]["PatchSection"] | null;
            /** @description Sections covering trailers (Signed-off-by, Acked-by, etc.) and optional git footers. */
            trailer_sections?: components["schemas"]["PatchSection"][];
            /**
             * Format: uint
             * @description Position of the RFC 822 style `---` separator, if present.
             */
            separator_line?: number | null;
            /**
             * Format: uint
             * @description Total number of trailer lines detected (Signed-off-by, Reviewed-by, ...).
             */
            trailer_count: number;
        };
        /** @description Inclusive range (0-based line numbers) marking a logical patch section. */
        PatchSection: {
            /**
             * Format: uint
             * @description First line (0-based index) belonging to the section.
             */
            start_line: number;
            /**
             * Format: uint
             * @description Last line (0-based index) belonging to the section.
             */
            end_line: number;
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_Array_of_EmailWithAuthor: {
            data: components["schemas"]["EmailWithAuthor"][];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        /** @description Email row enriched with author metadata for API responses. */
        EmailWithAuthor: {
            /**
             * Format: int32
             * @description Database identifier.
             */
            id: number;
            /**
             * Format: int32
             * @description Mailing list identifier.
             */
            mailing_list_id: number;
            /** @description RFC 822 message-id. */
            message_id: string;
            /** @description Git commit hash referencing the blob inside the mirror. */
            git_commit_hash: string;
            /**
             * Format: int32
             * @description Author identifier.
             */
            author_id: number;
            /** @description Email subject line. */
            subject: string;
            /**
             * Format: date-time
             * @description Original message timestamp.
             */
            date: string;
            /** @description Optional parent message-id (for replies). */
            in_reply_to?: string | null;
            /** @description Message body (may be truncated or sanitized). */
            body?: string | null;
            /**
             * Format: date-time
             * @description Timestamp when the row was inserted.
             */
            created_at?: string | null;
            /** @description Canonical author name, if known. */
            author_name?: string | null;
            /** @description Author email address. */
            author_email: string;
            /** @description Patch classification for this email. */
            patch_type: components["schemas"]["PatchType"];
            /** @description Whether the body is entirely commit message + diff content. */
            is_patch_only: boolean;
            /** @description Inline patch metadata (diff sections, trailers, diffstat). */
            patch_metadata?: components["schemas"]["PatchMetadata"] | null;
        };
        EmailListParams: {
            /**
             * Format: int64
             * @default 1
             */
            page: number;
            /**
             * Format: int64
             * @default 50
             */
            pageSize: number;
            /** @default [] */
            sort: string[];
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_EmailWithAuthor: {
            data: components["schemas"]["EmailWithAuthor"];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_Array_of_AuthorWithStats: {
            data: components["schemas"]["AuthorWithStats"][];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        /** @description Aggregated author statistics used in list and detail endpoints. */
        AuthorWithStats: {
            /**
             * Format: int32
             * @description Author identifier.
             */
            id: number;
            /** @description Primary email address. */
            email: string;
            /** @description Normalized/canonical author name. */
            canonical_name?: string | null;
            /**
             * Format: date-time
             * @description When the author was first seen in any mailing list.
             */
            first_seen?: string | null;
            /**
             * Format: date-time
             * @description Most recent activity timestamp.
             */
            last_seen?: string | null;
            /**
             * Format: int64
             * @description Number of emails authored in the target mailing list.
             */
            email_count: number;
            /**
             * Format: int64
             * @description Number of threads the author participated in.
             */
            thread_count: number;
            /**
             * Format: date-time
             * @description Timestamp of the first email authored in the list.
             */
            first_email_date?: string | null;
            /**
             * Format: date-time
             * @description Timestamp of the latest email authored in the list.
             */
            last_email_date?: string | null;
            /** @description All mailing list slugs where the author is active. */
            mailing_lists: string[];
            /** @description Observed name variants sorted by usage count. */
            name_variations: string[];
        };
        AuthorListParams: {
            /**
             * Format: int64
             * @default 1
             */
            page: number;
            /**
             * Format: int64
             * @default 25
             */
            pageSize: number;
            /** @default [] */
            sort: string[];
            /** @default null */
            q: string | null;
            /** @default null */
            listSlug: string | null;
        };
        /** @description Root response payload returned by REST endpoints. */
        ApiResponse_for_AuthorWithStats: {
            data: components["schemas"]["AuthorWithStats"];
            /** @default {} */
            meta: components["schemas"]["ResponseMeta"];
        };
        /** @description Common pagination parameters applied to list endpoints. */
        PaginationParams: {
            /**
             * Format: int64
             * @description One-based page index (defaults to the first page).
             * @default 1
             */
            page: number;
            /**
             * Format: int64
             * @description Number of items per page (clamped between 1 and 100, default 50).
             * @default 25
             */
            pageSize: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    routes_health_live_health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_HealthResponse"];
                };
            };
        };
    };
    routes_health_ready_health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_HealthResponse"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_auth_signup_blocked: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthErrorResponse"];
                };
            };
        };
    };
    routes_auth_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthErrorResponse"];
                };
            };
        };
    };
    routes_auth_refresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshResponse"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthErrorResponse"];
                };
            };
        };
    };
    routes_auth_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LogoutRequest"];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthErrorResponse"];
                };
            };
        };
    };
    routes_auth_session_cookie: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionResponse"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthErrorResponse"];
                };
            };
        };
    };
    routes_auth_signing_keys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SigningKeyMetadata"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthErrorResponse"];
                };
            };
        };
    };
    routes_mailing_lists_list_lists: {
        parameters: {
            query?: {
                params?: components["schemas"]["ListQueryParams"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_Array_of_MailingList"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_mailing_lists_get_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_MailingList"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_stats_aggregate_stats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_ListAggregateStats"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_stats_list_stats: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_MailingListStats"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_threads_list_threads: {
        parameters: {
            query?: {
                params?: components["schemas"]["ThreadListParams"];
            };
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_Array_of_ThreadWithStarter"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_threads_get_thread: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                thread_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_ThreadDetail"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_emails_list_emails: {
        parameters: {
            query?: {
                params?: components["schemas"]["EmailListParams"];
            };
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_Array_of_EmailWithAuthor"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_emails_get_email: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                email_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_EmailWithAuthor"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_authors_list_authors: {
        parameters: {
            query?: {
                params?: components["schemas"]["AuthorListParams"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_Array_of_AuthorWithStats"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_authors_get_author: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                author_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_AuthorWithStats"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_authors_get_author_emails: {
        parameters: {
            query?: {
                params?: components["schemas"]["PaginationParams"];
            };
            header?: never;
            path: {
                author_id: number;
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_Array_of_EmailWithAuthor"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_authors_get_author_threads_started: {
        parameters: {
            query?: {
                params?: components["schemas"]["ThreadListParams"];
            };
            header?: never;
            path: {
                author_id: number;
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_Array_of_ThreadWithStarter"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    routes_authors_get_author_threads_participated: {
        parameters: {
            query?: {
                params?: components["schemas"]["ThreadListParams"];
            };
            header?: never;
            path: {
                author_id: number;
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_for_Array_of_ThreadWithStarter"];
                };
            };
            /** @description Bad Request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - The requested resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - An unexpected error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
